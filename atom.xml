<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sugan&#39;s blog</title>
  
  <subtitle>Keep on thinking, and learn how people think.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sysusugan.github.io/"/>
  <updated>2018-08-09T16:46:45.000Z</updated>
  <id>https://sysusugan.github.io/</id>
  
  <author>
    <name>sugan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速编译和修改特定class文件</title>
    <link href="https://sysusugan.github.io/2018/08/06/quick-modify-jar-class/"/>
    <id>https://sysusugan.github.io/2018/08/06/quick-modify-jar-class/</id>
    <published>2018-08-06T00:00:00.000Z</published>
    <updated>2018-08-09T16:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这里介绍一种快速编译和修改jar里面特定class文件的方法， 本质上是对javac 、java、zip命令的综合使用。 在某些场景，能极大地提高部署和上线效率， 但是仅适用于少数为了快速调试、对外上线的特定业务场景。但是， 在正规的工程管理里面，仍然需要按项目开发和代码管理规范来！</p><a id="more"></a><h2 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h2><ol><li>jar文件本质是采用zip压缩的zip包，允许使用 zip、unzip命令对jar文件进行操作， 具体自己看man手册</li><li>javac 只需要依赖的环境（依赖的环境变量、jar classpath ）完整即可正常对一个工程或java文件进行编译</li></ol><h2 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h2><p>以编译 HDP自带的 ranger unixusersync包为例，  ranger的源代码见：<a href="https://github.com/apache/ranger/tree/ranger-0.5.2-rc1/" target="_blank" rel="noopener">https://github.com/apache/ranger/tree/ranger-0.5.2-rc1/</a></p><p>需要修改下面这个文件， 改动里面的默认成参数，加快自动同步LDAP用户信息到ranger的频率（默认是1小时）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径：  org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_LDAP_DEFAULT_VALUE = <span class="number">3600000L</span>;”</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>在HDP安装目录，找到目标的ranger jar文件为： unixusersync-0.5.0.2.4.2.0-258.jar</p></li><li><p>拷贝jar重命名为 “unixusersync-0.5.0.2.4.2.0-258_sugan.jar” , 然后删除这个拷贝的jar里面指定的class文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@orochihdp1 dist]# cp unixusersync-0.5.0.2.4.2.0-258.jar  unixusersync-0.5.0.2.4.2.0-258_sugan.jar</span><br><span class="line">[root@orochihdp1 dist]# zip -d unixusersync-0.5.0.2.4.2.0-258_sugan.jar '/org/apache/ranger/unixusersync/config/UserGroupSyncConfig.class'</span><br></pre></td></tr></table></figure><ol start="3"><li>修改UserGroupSyncConfig.java 里面的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> UGSYNC_SLEEP_TIME_IN_MILLIS_BETWEEN_CYCLE_LDAP_DEFAULT_VALUE = <span class="number">60000L</span>;”      </span><br><span class="line"><span class="comment">//    改成 60000L，加快自动同步LDAP用户信息到ranger的频率，默认是1小时</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编译：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 路径： root@orochihdp1:/usr/hdp/current/ranger-usersync/dist</span></span><br><span class="line"></span><br><span class="line">javac -Xlint:unchecked  -cp  /usr/hdp/current/ranger-usersync/lib/commons-cli-1.2.jar:/usr/hdp/current/ranger-usersync/lib/commons-codec-1.9.jar:/usr/hdp/current/ranger-usersync/lib/commons-collections-3.2.2.jar:/usr/hdp/current/ranger-usersync/lib/commons-configuration-1.10.jar:/usr/hdp/current/ranger-usersync/lib/commons-csv-1.0.jar:/usr/hdp/current/ranger-usersync/lib/commons-httpclient-3.1.jar:/usr/hdp/current/ranger-usersync/lib/commons-io-2.4.jar:/usr/hdp/current/ranger-usersync/lib/commons-lang-2.6.jar:/usr/hdp/current/ranger-usersync/lib/commons-logging-1.2.jar:/usr/hdp/current/ranger-usersync/lib/credentialbuilder-0.5.0.2.4.2.0-258.jar:/usr/hdp/current/ranger-usersync/lib/gson-2.2.4.jar:/usr/hdp/current/ranger-usersync/lib/guava-11.0.2.jar:/usr/hdp/current/ranger-usersync/lib/hadoop-auth-2.7.1.2.4.2.0-258.jar:/usr/hdp/current/ranger-usersync/lib/hadoop-common-2.7.1.2.4.2.0-258.jar:/usr/hdp/current/ranger-usersync/lib/htrace-core-3.1.0-incubating.jar:/usr/hdp/current/ranger-usersync/lib/jersey-bundle-1.17.1.jar:/usr/hdp/current/ranger-usersync/lib/log4j-1.2.17.jar:/usr/hdp/current/ranger-usersync/lib/ranger-util-0.5.0.2.4.2.0-258.jar:/usr/hdp/current/ranger-usersync/lib/slf4j-api-1.7.5.jar:unixauthservice-0.5.0.2.4.2.0-258.jar:**./unixusersync-0.5.0.2.4.2.0-258_sugan.jar **   ./org/apache/ranger/unixusersync/config/UserGroupSyncConfig.java</span><br></pre></td></tr></table></figure><ol start="5"><li>把编译出来的class文件打进jar</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -ru unixusersync-0.5.0.2.4.2.0-258_sugan.jar org/</span><br></pre></td></tr></table></figure><ol start="6"><li>把新的jar替换掉原来的jar（ 记得备份旧的）， 重启ranger</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面演示了这种方法， 体现了对Apache ranger这个组件的源码进行修改的便利性， 帮助我们省去了完整的ranger工程项目下载和本地搭建、  本地编译打包（这个过程还需要下载大量依赖的其他包， 而且编译时间也颇久），  节约了大量的时间。</p><p>借助这种猥琐姿势， 我们能在以下场景中提高我们的效率：</p><ul><li>开源组件源码修改和编译：  Hadoop、spark、yarn等等只要有对标版本的源码，  我们能快速修改某个jar的源代码和上线</li><li>线上平台调试： 对一些问题的调试，  可以临时写个java， 在线上环境（例如跳板机）编译和运行后做 debug</li><li>简单的逆向和破解场景： 这个方法同样适用，  前提是可反编译出目标代码并且目标的jar没做额外的加固和授权，  例如大部分第三方插件如 Jira a插件的破解</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里介绍一种快速编译和修改jar里面特定class文件的方法， 本质上是对javac 、java、zip命令的综合使用。 在某些场景，能极大地提高部署和上线效率， 但是仅适用于少数为了快速调试、对外上线的特定业务场景。但是， 在正规的工程管理里面，仍然需要按项目开发和代码管理规范来！&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://sysusugan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://sysusugan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>博客开篇</title>
    <link href="https://sysusugan.github.io/2018/07/28/blog-start/"/>
    <id>https://sysusugan.github.io/2018/07/28/blog-start/</id>
    <published>2018-07-28T00:00:00.000Z</published>
    <updated>2018-08-09T16:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>背景是之前7月初的时候心血来潮，感觉要开始写博客记录一些东西。在花了周末两天时间去折腾和搭建这个博客后， 就拖到7月底（期间都没碰过这个博客）， 现在才想起来要写个真正意义的博客的开篇文章。<br><a id="more"></a><br>对于这个博客的打算， 主要是以记录一些生活感悟、技术文章为主， 期望一个月能产出至少1篇吧。 简单讲下写博客的目标：</p><ul><li><p>对知识成体系的整理：对各个领域学习的知识进行整理。之前的做法是只要是能在网上找到的资料，就先摘录相关知识点放在印象笔记里面。 缺点是知识比较碎片化，而且没转换成自己的知识体系进行梳理。通过写博客，可以来push自己来整理和分享出来。</p></li><li><p>夯实自己的认知体系： 大部分会是对生活和工作经历的反思跟总结。 年轻的时候还没形成相对稳定的世界观和方法论，所以只是观察和思考为主，记下来估计也是流水账。现在年纪大了成熟了（咳咳），对比了前几年，觉得自己有自信能写出一些能体现“独立思考”跟对自己本时期有价值的感悟，写下来也好提醒自己不断去付诸实践。</p></li></ul><p>(未完待续… …)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景是之前7月初的时候心血来潮，感觉要开始写博客记录一些东西。在花了周末两天时间去折腾和搭建这个博客后， 就拖到7月底（期间都没碰过这个博客）， 现在才想起来要写个真正意义的博客的开篇文章。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于hexo、atom打造本地写作环境和搭建blog</title>
    <link href="https://sysusugan.github.io/2018/07/08/hexo-atom-blog/"/>
    <id>https://sysusugan.github.io/2018/07/08/hexo-atom-blog/</id>
    <published>2018-07-08T08:23:00.000Z</published>
    <updated>2018-08-09T16:13:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一整天的 atom、hexo相关插件安装配置，atom和hexo协作的一些小坑记录。在调试多个插件的配置和协作， 最后不得不改了插件的源码来解决图片路径问题，  最后打造了一个靠谱的本地md写作编辑器。</p><h2 id="编辑能力："><a href="#编辑能力：" class="headerlink" title="编辑能力："></a>编辑能力：</h2><blockquote><p>得益于<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">MPE扩展</a> （扩展语法、绘图， 编辑功能完爆马克飞象、Macdown这些，  还可以方便地在渲染后，借助浏览器或额外的插件， 在本地导出pdf。</p></blockquote><blockquote><p>得益于atom 的强大插件机制，  配出了顶部的markdown工具栏、右侧markdown增强渲染栏、 图片上传（支持截屏拷贝粘贴）和生成正确路径。</p></blockquote><a id="more"></a><h2 id="Blog部署："><a href="#Blog部署：" class="headerlink" title="Blog部署："></a>Blog部署：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地预览：</span></span><br><span class="line">hexo clean &amp;&amp; hexo  g  &amp;&amp; hexo server -d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发布到线上:</span></span><br><span class="line">hexo d  <span class="comment"># hexo deploy, 集成了git</span></span><br></pre></td></tr></table></figure><h3 id="Hexo插件"><a href="#Hexo插件" class="headerlink" title="Hexo插件:"></a>Hexo插件:</h3><p><img src="/images/2018/07/hexo-atom-blog/hexo.png" style="height:400px"></p><!-- ![hexo](/images/2018/07/hexo-atom-blog/hexo.png) --><h3 id="apm插件："><a href="#apm插件：" class="headerlink" title="apm插件："></a>apm插件：</h3><p><img src="/images/2018/07/hexo-atom-blog/apm插件.png" style="height:150px"></p><h2 id="重要的配置说明："><a href="#重要的配置说明：" class="headerlink" title="重要的配置说明："></a>重要的配置说明：</h2><ol><li>atom项目根路径： hexo项目的的source目录</li><li>图片统一存储：在source目录下面创建一个images文件夹，作为全局的文件路径</li><li>markdown-writer，查看源代码，修改下面的地方，直接插入图片的时候， 路径就是完美的根路径， 跟部署到服务器上的路径也一致（下图）</li></ol><p><img src="/images/2018/07/hexo-atom-blog/md-writert-modify.png" style="height:200px"></p><h3 id="图片路径修正方法"><a href="#图片路径修正方法" class="headerlink" title="图片路径修正方法:"></a>图片路径修正方法:</h3><!-- ![p1](/images/2018/07/hexo-atom-blog/图片路径修正方法：.png) --><p><img src="/images/2018/07/hexo-atom-blog/图片路径修正方法：.png" style="height:150px"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h2><p><img src="/images/2018/07/hexo-atom-blog/总图.png" alt="总图"></p><p><img src="/images/2018/07/hexo-atom-blog/img-up.png" alt="本地文件上传"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一整天的 atom、hexo相关插件安装配置，atom和hexo协作的一些小坑记录。在调试多个插件的配置和协作， 最后不得不改了插件的源码来解决图片路径问题，  最后打造了一个靠谱的本地md写作编辑器。&lt;/p&gt;
&lt;h2 id=&quot;编辑能力：&quot;&gt;&lt;a href=&quot;#编辑能力：&quot; class=&quot;headerlink&quot; title=&quot;编辑能力：&quot;&gt;&lt;/a&gt;编辑能力：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;得益于&lt;a href=&quot;https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MPE扩展&lt;/a&gt; （扩展语法、绘图， 编辑功能完爆马克飞象、Macdown这些，  还可以方便地在渲染后，借助浏览器或额外的插件， 在本地导出pdf。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;得益于atom 的强大插件机制，  配出了顶部的markdown工具栏、右侧markdown增强渲染栏、 图片上传（支持截屏拷贝粘贴）和生成正确路径。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://sysusugan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="https://sysusugan.github.io/tags/Hexo/"/>
    
      <category term="Atom编辑器" scheme="https://sysusugan.github.io/tags/Atom%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
</feed>
